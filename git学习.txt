第一次使用的设置：
	设置门牌：   
	git config --global user.name "Your Name"
	git config --global user.email "email@example.com"
	获得密钥：
	ssh-keygen -t rsa -C "abc@gmail.com"  //填写email地址，然后一直“回车”ok

	打开本地..\.ssh\id_rsa.pub文件。此文件里面内容为刚才生成的密钥。然后把该密钥复制到github的setting/ssh中

	测试是否连接成功
	ssh -T git@github.com

	提示像我这样：Hi xxx! You've successfully authenticated, but GitHub does not provide shell access. 那就说明连接成功了。

初始化：   
git init

添加文件：
git add filename
提交:
git commit -m message

查看提交记录：
git log [--pretty=oneline]

文件回退到最新版本（add了，但是还没commit）
git reset HEAD
回退上一个版本：（^代表上几个版本，多个用~n）
git reset --hard HEAD^
或者
git reset --hard commitId

查看所有命令历史
git reflog


项目文件夹就是工作区，.git文件夹就是版本库，版本库里有暂存区和分支

查看工作区状态
git status


为什么Git比其他版本控制系统设计得优秀，因为Git跟踪并管理的是修改，而非文件


命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：
	一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。
	
	
删除文件命令（先手动删除）
然后git rm <file>或者git add<file>效果是一样的


关联github
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
假如再push之前已经在github上写好了自己的readme.md文件，那么在上面这步之前，还应该先
	 git pull --rebase origin master
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。


克隆仓库：
要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。


你也许还注意到，GitHub给出的地址不止一个，还可以用https://github.com/michaelliao/gitskills.git这样的地址。实际上，Git支持多种协议，默认的git://使用ssh，但也可以使用https等其他协议。
使用https除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令，但是在某些只开放http端口的公司内部就无法使用ssh协议而只能用https。




创建dev分支：
git branch dev
切换到dev分支：
git checkout dev
也可以一句搞定
git checkout -b dev

列出所有分支：
git branch

合并指定分支到当前分支（当前为master）
git merge dev

删除dev分支：
git branch -d dev

当有冲突时冲突文件有标注
然后再次修改文件，add,commit,即可

查看合并图
git log --graph --pretty=oneline --abbrev-commit

默认的合并策略是Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
可以用强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息

比如准备合并dev分支，请注意--no-ff参数，表示禁用Fast forward
git merge --no-ff -m "merge with no-ff" dev

分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。




突然要修复bug是怎么做：
1、保护现场  git stash
2、在有bug的分支上创建修复bug的分支，然后修复
3、恢复分支两种办法
	一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
	另一种方式是用git stash pop，恢复的同时把stash内容也删了
	
查看工作现场：
git stash list



开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。






多人协作（假如github上的项目有master和dev两个分支）
1、你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看
2、你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
	 git checkout -b dev origin/dev
	 现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程
3、你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送，然后推送失败
	推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：
	git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：
		git branch --set-upstream-to=origin/dev dev
	再pull：
		git pull
	这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push，搞定

	
	

	
打tag:
git tag v1.0

给之前提交的打tag:
git tag  v1.0 commitId

查看标签信息：
git show <tagname>

创建带有说明的标签，用-a指定标签名，-m指定说明文字：
git tag -a v0.1 -m "version 0.1 released" 1094adb

删除标签：
git tag -d v0.1

推送某个标签到远程：
git push origin <tagname>

删除远程标签：
1、先删除本地标签
2、git push origin :refs/tags/<tagname>可以删除一个远程标签





删除已关联的远程库：
git remote rm origin

查看远程库信息：
git remote -v

推送到码云或者github（github和gitee为自定义的远程库名）
git push github master
git push gitee master







